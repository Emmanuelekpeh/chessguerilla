// This file would be used as a serverless function on Render
// It generates chess puzzles dynamically

const { Chess } = require('chess.js');

// Mock database of chess positions and tactics
const tacticalPositions = [
    {
        fen: 'r1bqkb1r/pppp1ppp/2n5/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4',
        tactic: 'fork',
        sequence: ['d2d4', 'e5d4', 'e4e5'],
        difficulty: 'easy'
    },
    {
        fen: 'r1bqkbnr/ppp2ppp/2np4/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 0 4',
        tactic: 'pin',
        sequence: ['c4f7', 'e8f7', 'd1f3'],
        difficulty: 'medium'
    },
    {
        fen: 'r3k2r/ppp2ppp/2n1b3/2b1p1q1/2B1P3/2NP1N2/PPP2PPP/R1BQ1RK1 b kq - 0 8',
        tactic: 'discovered attack',
        sequence: ['c5f2', 'g1f2', 'g5g2'],
        difficulty: 'hard'
    },
    // Add more positions as needed
];

// Additional positions can be generated by slightly modifying existing ones
function generateRandomPuzzle(requestedDifficulty = 'medium') {
    // Filter by requested difficulty if provided
    const filteredPositions = requestedDifficulty ? 
        tacticalPositions.filter(p => p.difficulty === requestedDifficulty.toLowerCase()) : 
        tacticalPositions;
    
    if (filteredPositions.length === 0) {
        return generateFallbackPuzzle(requestedDifficulty);
    }
    
    const basePosition = filteredPositions[Math.floor(Math.random() * filteredPositions.length)];
    
    // Create a unique ID for this puzzle
    const puzzleId = Date.now().toString(36) + Math.random().toString(36).substring(2, 5);
    
    // Create a new puzzle object
    const puzzle = {
        id: puzzleId,
        fen: basePosition.fen,
        difficulty: basePosition.difficulty.charAt(0).toUpperCase() + basePosition.difficulty.slice(1),
        objective: `Find the best move (${basePosition.tactic} tactic)`,
        moves: [...basePosition.sequence], // Make a copy to avoid modifying the original
        orientation: basePosition.fen.includes(' w ') ? 'white' : 'black',
        explanation: `This is a ${basePosition.tactic} tactic that gains material or improves position.`
    };
    
    return puzzle;
}

// Generate a fallback puzzle when no matching difficulty is found
function generateFallbackPuzzle(requestedDifficulty) {
    // Create a new game
    const game = new Chess();
    
    // Make some random moves to reach a non-starting position
    const numMoves = Math.floor(Math.random() * 6) + 3;
    for (let i = 0; i < numMoves; i++) {
        const moves = game.moves();
